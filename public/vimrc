


call plug#begin('~/.vim/plugged')

" Traces(Real time replace)
Plug 'markonm/traces.vim'

" easy motion
Plug 'easymotion/vim-easymotion'

" explorers
Plug 'junegunn/fzf.vim'
Plug 'jlanzarotta/bufexplorer'

" Programming
Plug 'tpope/vim-surround'
Plug 'rust-lang/rust.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'vim-syntastic/syntastic'
Plug 'preservim/tagbar'

" colorscheme
Plug 'rafalbromirski/vim-aurora' "dark
Plug 'tomasr/molokai' "dark
Plug 'yuttie/hydrangea-vim' "dark
Plug 'ghifarit53/tokyonight-vim' "dark|darkbluish

Plug 'chriskempson/vim-tomorrow-theme' " multiple|dark|light (Tomorr..)

" eye-friendly
Plug 'tyrannicaltoucan/vim-deep-space' "dark
Plug 'arcticicestudio/nord-vim' "dark
Plug 'AlessandroYorba/Despacio' "darkshades 
Plug 'w0ng/vim-hybrid' "dark

Plug 'morhetz/gruvbox' "light|dark
Plug 'nightsense/cosmic_latte' " dark|light
Plug 'nightsense/stellarized' " dark|light
Plug 'cocopon/iceberg.vim' "dark| light
Plug 'nightsense/snow' "dark|light

" Watching
" Plug 'airblade/vim-rooter' "to set root directory to tell fzf where to
" search
" Plug 'preservim/nerdcommenter' "to comment lines
" Plug 'embark-theme/vim', { 'as': 'embark' } "dark/bad theme 

call plug#end()			


"                       LEADER KEY 
let mapleader="," 

" ====================== Plugin-settings ==========================

"                         vim-plug
nnoremap <Leader><Leader>p :PlugInstall<CR>
nnoremap <Leader><Leader>c :PlugClean<CR>
nnoremap <Leader><Leader>u :PlugUpdate<CR>

"                          Easymotion
map <Leader> <Plug>(easymotion-prefix)

" Explorers
nnoremap <C-p> :Files<CR>
let g:fzf_layout = {'down':'40%' }
nnoremap <leader>l :Buffers<CR>

nnoremap <leader>e :BufExplorer<CR>

"                      Programming
"                       Tagbar
nnoremap tt :TagbarToggle<CR>
"                       rust
let g:rustfmt_autosave = 1
"                       coc.nvim
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

command! -nargs=0 Prettier :CocCommand prettier.formatFile "prettier

"                       Colorschemes    
let g:gruvbox_style = 'night' "night/storm
let g:gruvbox_enable_italic = 1
let g:deepspace_italics = 1

let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
let g:molokai_original = 1

let g:despacio_Sunset = 1
let g:despacio_Twilight = 0
let g:despacio_Midnight = 0
let g:despacio_Pitch = 0

" ======================= Key-bindings ==========================

" Write changes
nnoremap .. :w<CR>

" Follow
nnoremap f *

" viewports 
nnoremap m <C-w>
nmap <C-e> m=
imap <C-e> <Esc>m=a
nmap <C-s> m-
imap <C-s> <Esc>m-a
nmap <C-d> m+
imap <C-d> <Esc>m+a

" move lines
nnoremap <C-K> <CMD>m .-2<CR>
nnoremap <C-J> <CMD>m .+1<CR>
nnoremap <C-H> <<
nnoremap <C-L> >>  

inoremap <C-H> <CMD>normal <<<CR>
inoremap <C-L> <CMD>normal >><CR>
inoremap <C-K> <CMD>m .-2<CR>
inoremap <C-J> <CMD>m .+1<CR>

vnoremap <C-K> :m '<-2<CR>gv
vnoremap <C-J> :m '>+1<CR>gv
vnoremap <C-H> <gv
vnoremap <C-L> >gv 

" copy the entire file to the clipboard
nnoremap Y :!xsel -b < %<CR><CR>

" Copy pasting (Using gvim to use inbuilt clipboards)
noremap <leader>y "+y
noremap <leader>p "+p
autocmd VimLeave * call system("xsel -ib", getreg('+'))

" Source vimrc
nnoremap ., :source ~/.vimrc<CR>

" To toggle numbering
nmap <leader>i :exec &nu==&rnu? "se nu!" : "se rnu!"<CR>

" format the code
nnoremap <C-f> :RustFmt<CR>
" autocmd BufNewFile,BufRead *.rs :RustFmt

" nohl
nnoremap <silent><expr> <Leader>h (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"

"                            NAVIGATION KEYBINDINGS 

" tabs
nnoremap tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>

" stay in normal mode after inserting a new line
noremap o o <Esc>
noremap O O <Esc>

" fast scrolling
nnoremap J 6j
nnoremap K 6k
vnoremap J 6j
vnoremap K 6k

" fast scrolling
nnoremap H 6h
nnoremap L 6l
vnoremap H 6h
vnoremap L 6l

" ============================ Switches/Misc =============================

" numbering
set rnu 

" background
set background=dark

" 256 colors
set termguicolors

" Cursors
set cursorline
set cursorcolumn

set notimeout ttimeout ttimeoutlen=40 
set mouse=a
set scrolloff=18

set nocompatible
filetype plugin indent on
syntax on

" highlight matching braces
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=0

" Set recursive search
set path+=**

" Use tab completion everywhere 
set wildmenu

" disable wrapping of long lines into multiple lines
set wrap

" history
set history=1000

" on some systems the backspace does not work as expected.
" this fixes the problem
set backspace=indent,eol,start

" encoding
set encoding=UTF-8

set signcolumn=number

"                       INDENTATION

set autoindent
set showmode 
set smartindent
filetype indent on 
set shiftwidth=4
set tabstop=4
set smarttab
set expandtab

"                       SEARCHING

" Ignorecase when searching
set ignorecase

" incremental search - Vim starts searching when we start typing
set incsearch

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

"                       PERFORMANCE

" fix slow scrolling that occurs when using mouse and relative numbers
set lazyredraw

" ========================= Highlighting  ============================

" ================ Folds ============================

" ================ File management ==================

" Turn off swap files
set noswapfile
set nobackup
set nowb

" reload files changed outside vim
set autoread
" Triger `autoread` when files changes on disk
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
autocmd FileChangedShellPost *
            \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" ========= template / compile / run ===============

nnoremap <leader>t :!cp ~/templates/template.%:e %<Enter> 

"shortcut to run current filetype
map <leader>r :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!clear && gcc % -o %< && echo COMPILED"
        exec "!clear && time ./%<"
    elseif &filetype == 'cpp'
        exec "!clear && g++ % -o %< && echo COMPILED"
        exec "!clear && time ./%<"
    elseif expand('%:t') == 'main.rs'
        exec "!clear && cargo build --manifest-path=%:p:h:h/Cargo.toml && echo COMPILED"
        exec "!time cargo run --manifest-path=%:p:h:h/Cargo.toml"
    elseif &filetype == 'rust'
        exec "!clear && rustc %:p --out-dir=%:p:h && echo COMPILED"
        exec "!time " .expand("%:p:r")
    elseif &filetype == 'java'
        exec "!clear && javac % && echo COMPILED"
        exec "!clear && time java -cp %:p:h %:t:r"
    elseif &filetype == 'sh'
        exec "!clear && time bash %"
    elseif &filetype == 'text'
        exec "!clear && echo 'words : ' && wc -w % && echo 'lines : ' && wc -l % && echo 'size : ' && du -h %"
    elseif &filetype == 'python'
        exec "!clear && time python3 %"
    elseif &filetype == 'javascript'
        exec "!clear && time node %"
    elseif &filetype == 'html'
        exec "!chromium % &"
    elseif &filetype == 'go'
        exec "!go build %< && echo COMPILED"
        exec "!clear && time go run %"
    endif
endfunc

" ====================================================================
"
colorscheme tokyonight
